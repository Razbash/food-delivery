{"version":3,"file":"static/js/594.1f5d2c71.chunk.js","mappings":"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","sources":["screens/Registration/components/RegistrationForm.tsx","screens/Registration/RegistrationPage.tsx","ui/Form/components/Input.tsx","ui/Form/components/Checkbox.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\nimport { useAppDispatch, useAppSelector } from '../../../store/redux';\nimport { sendUser } from '../../../store/User/userActions';\nimport { Input } from '../../../ui/Form';\nimport { Notification, NotificationTypes, startNotification } from '../../../components/Notification';\nimport { setCookie } from '../../../utils/cookie/cookie';\nimport axios from '../../../utils/axios';\nimport EnumSendUserTypes from '../../Account/interfaces/EnumSendUserTypes';\n\n\nconst RegistrationForm = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const {error} = useAppSelector(state => state.user);\n    const dispatch = useAppDispatch();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (error) {\n            dispatch(startNotification({\n                type: NotificationTypes.error,\n                text: `An error occurred when creating a new user. ${error}`,\n            }));\n        }\n\n        // eslint-disable-next-line\n    }, [error]);\n\n    const onUserRegistration = async(event: React.ChangeEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const generateUserId = Math.floor(Math.random() * 999999);\n        const findedUserByEmail = await axios.get(`users?email=${email}`);\n\n        if (findedUserByEmail.data && findedUserByEmail.data.length) {\n            dispatch(startNotification({\n                type: NotificationTypes.warning,\n                text: 'A user with this email already exists',\n            }));\n\n            return;\n        }\n\n        if (password === confirmPassword) {\n            const newUser = {\n                id: generateUserId,\n                firstName: '',\n                lastName: '',\n                email: email,\n                password: password,\n            };\n\n            dispatch(sendUser(newUser, EnumSendUserTypes.CREATE));\n\n            dispatch(startNotification({\n                type: NotificationTypes.sucsses,\n                text: 'The profile has been created successfully. Tell us more about yourself',\n            }));\n\n            setCookie('userId', String(generateUserId));\n            navigate('/account');\n        } else {\n            dispatch(startNotification({\n                type: NotificationTypes.error,\n                text: 'Passwords don\\'t match',\n            }));\n        }\n    };\n\n    return(\n        <form className=\"registration-form\" onSubmit={onUserRegistration}>\n            <div className=\"registration-form__fields\">\n                <Input label=\"Email\"\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"name@example.com\"\n                    isRequired={true}\n                    value={email}\n                    onChange={setEmail}\n                />\n                <Input label=\"Password\"\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    isRequired={true}\n                    value={password}\n                    onChange={setPassword}\n                />\n                <Input label=\"Confirm password\"\n                    id=\"confirm_password\"\n                    type=\"password\"\n                    placeholder=\"Confirm password\"\n                    isRequired={true}\n                    value={confirmPassword}\n                    onChange={setConfirmPassword}\n                />\n            </div>\n            <div className=\"registration-form__buttons\">\n                <button className=\"button button--contained\">Continue</button>\n                <Link to=\"/auth\" className=\"registration-form__back-button\">Back</Link>\n            </div>\n\n            <Notification/>\n        </form>\n    );\n};\n\nexport default RegistrationForm;","import { CompanyLogo, CompanyLogoColors } from '../Layouts/components/CompanyLogo';\n\nimport RegistrationForm from './components/RegistrationForm';\nimport './registration.scss';\n\nconst RegistrationPage = () => {\n    return(\n        <div className=\"registration\">\n            <div className=\"registration__demo\">\n                <CompanyLogo color={CompanyLogoColors.light}/>\n\n                <h3 className=\"registration__description\">A few steps to create your restaurant or personal account</h3>\n                <p className=\"registration__text\">Lorem ipsum dolor sit amet, magna scaevola his ei. Cum te paulo probatus molestiae.</p>\n                <img src=\"../../assets/images/auth/registration.png\"\n                    alt=\"Registration\"\n                    className=\"registration__image\"\n                    width={878}\n                />\n            </div>\n            <div className=\"registration__details\">\n                <h1 className=\"registration__title\">Personal details</h1>\n                <span className=\"registration__subtitle\">Enter your data that you will use for entering.</span>\n\n                <RegistrationForm/>\n            </div>\n        </div>\n    );\n};\n\nexport default RegistrationPage;","import IInput from '../interfaces/IInput';\nimport '../form.scss';\n\nconst Input = ({\n    label,\n    id,\n    value,\n    placeholder,\n    onChange,\n    icon,\n    isRequired = false,\n    type = 'text',\n    autocomplete = 'off',\n}: IInput) => {\n    const onSetValue = (value: string) => {\n        onChange(value);\n    };\n\n    return(\n        <div className=\"input-wrapper\">\n            <label htmlFor={id} className=\"input-label\">{label}</label>\n\n            <div className=\"input-with-icon\">\n                <input type={type}\n                    id={id}\n                    className=\"input\"\n                    required={isRequired}\n                    placeholder={placeholder}\n                    value={value}\n                    autoComplete={autocomplete}\n                    onChange={(e) => onSetValue(e.target.value)}\n                />\n\n                {icon ? icon : null}\n            </div>\n        </div>\n    );\n};\n\nexport default Input;","import ICheckbox from '../interfaces/ICheckbox';\nimport '../form.scss';\n\nconst Checkbox = ({id, label, value, setValue}: ICheckbox) => {\n    const onSetValue = () => {\n        setValue(!value);\n    };\n\n    return(\n        <label className=\"checkbox\">\n            <input type=\"checkbox\"\n                id={id}\n                className=\"checkbox__input\"\n                checked={value}\n                onChange={onSetValue}\n            />\n\n            <span className=\"checkbox__label\">{label}</span>\n        </label>\n    );\n};\n\nexport default Checkbox;"],"names":["useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","error","useAppSelector","state","user","dispatch","useAppDispatch","navigate","useNavigate","useEffect","startNotification","type","NotificationTypes","text","onUserRegistration","event","preventDefault","generateUserId","Math","floor","random","axios","findedUserByEmail","data","length","newUser","id","firstName","lastName","sendUser","EnumSendUserTypes","setCookie","String","className","onSubmit","I","label","placeholder","isRequired","value","onChange","to","Notification","CompanyLogo","color","CompanyLogoColors","src","alt","width","icon","autocomplete","onSetValue","htmlFor","required","autoComplete","e","target","setValue","checked"],"sourceRoot":""}